import telebot
from telebot import *
import database


def keyboards_create(MN, NumberColumns=1):
    keyboards = types.ReplyKeyboardMarkup(
        row_width=NumberColumns, resize_keyboard=True)
    btn_names = [types.KeyboardButton(text=x) for x in MN]
    keyboards.add(*btn_names)
    return keyboards


bot = telebot.TeleBot('6279309417:AAEs9jKOp18I_RYxc41EI2uI31zIV0ZxZcQ')

def welcome_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µü§ñ')
    btn2 = types.KeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üî¢')
    btn3 = types.KeyboardButton('–§–∏–∑–∏–∫–∞üî¨')
    btn4 = types.KeyboardButton("–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏üå≥ü¶†ü™≤")
    btn5 = types.KeyboardButton('–ö–æ—Å–º–æ—ÅüöÄ')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.from_user.id,f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ!\n–ú—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Ñ–∏–∑–∏–∫–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–∞—É–∫–∞–º. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∑–Ω–∞–Ω–∏–π! üöÄüî≠', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    nic =  message.from_user.username
    id = message.chat.id
    new = db.check_human(id)
    if new is not None:
        bot.send_message(message.from_user.id, f"–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        welcome_message(message)
    elif new is None:
        list_names_surnames = []
        list_names_surnames.append(nic)
        bot.send_message(message.from_user.id, "–í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        bot.register_next_step_handler(message, names, list_names_surnames)


def names(message, list_names_surnames):
    names = message.text.strip()
    list_names_surnames.append(names)
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(message, surnames, list_names_surnames)

def surnames(message, list_names_surnames):
    surnames = message.text.strip()
    list_names_surnames.append(surnames)
    db.new_human(message.chat.id, list_names_surnames)
    welcome_message(message)


@bot.message_handler(func = lambda m : m.text == '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µü§ñ')
def send_question(chat_id, question, current_question):
    db.programming(chat_id, question, current_question)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(str(i)) for i in range(1, 5)]
    keyboard.add(*buttons)

    bot.send_message(
        chat_id,
        f'{question[1]}\n1. {question[2]}\n2. {question[3]}\n3. {question[4]}\n4. {question[5]}'
        ,reply_markup=keyboard
    )
    bot.register_next_step_handler(message, check_answer, question, current_question)
@bot.message_handler(func=lambda message: True)
def check_answer(message, question, current_question):
    try:
        answer = int(message.text)
        chat_id = message.chat.id

        correct_option = current_question[chat_id]['otvet']
        if answer == correct_option:
            bot.send_message(chat_id, '–í–µ—Ä–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:')
            send_question(chat_id)
        else:
            bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
            send_question(chat_id )
    except ValueError:
        bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞.')
        send_question(chat_id )




if __name__ == '__main__':
    db = database.Database()
    bot.polling()