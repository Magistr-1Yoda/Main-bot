import telebot
from telebot import types
import sqlite3
import random
db = sqlite3.connect('viktorina.db', check_same_thread = False)
import telebot
from telebot import types
import sqlite3
import MN



db = sqlite3.connect('viktorina.db', check_same_thread = False)
sql = db.cursor()

sql.execute("""CREATE TABLE IF NOT EXISTS viktorina(
    chatid TEXT,
    username TEXT,
    score INT,
    name TEXT,
    surname TEXT
)""")
db.commit()


bot = telebot.TeleBot('6279309417:AAEs9jKOp18I_RYxc41EI2uI31zIV0ZxZcQ')
name = None
surname = None

def keyboards_create(MN, NumberColumns=1):
    keyboards = types.ReplyKeyboardMarkup(
        row_width=NumberColumns, resize_keyboard=True)
    btn_names = [types.KeyboardButton(text=x) for x in MN]
    keyboards.add(*btn_names)
    return keyboards

@bot.message_handler(commands=['start'])
def start(message):
    sql.execute(f"SELECT chatid FROM viktorina WHERE chatid = '{message.chat.id}'")
    if sql.fetchone() is None:
        db.commit()
    bot.send_message(message.from_user.id, MN.welcome_message,)
    bot.register_next_step_handler(message, user_name)
def user_name(message):
    global name
    name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é')
    bot.register_next_step_handler(message, user_surname)
def user_surname(message):
    global surname
    people_id = message.chat.id
    sql.execute(f"SELECT chatid FROM viktorina WHERE chatid = {people_id}")
    data = sql.fetchone()
    if data is None:    
        surname = message.text.strip()
        sql.execute("INSERT INTO viktorina VALUES(?,?,?,?,?)", (message.chat.id, message.from_user.username, 0, name, surname))
        db.commit()
        bot.send_message(message.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
    else: 
        bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç')
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=keyboards_create(MN.welcome_keyboard)) 
@bot.message_handler(func = lambda m : m.text == 'üõ°Ô∏è–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç–∏')
def bes(message):
    bot.send_message(message.from_user.id, MN.message_bezopasno, reply_markup=keyboards_create (MN.otvet_keyboard))
@bot.message_handler(func = lambda m : m.text == '–î–∞üëçüèª')
def bes(message):
    bot.send_message(message.from_user.id, MN.message_vopros1, reply_markup=keyboards_create(MN.bezopas1_keyboard)) 
@bot.message_handler(func = lambda m : m.text == '4-–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æü•≥' , parse_mode='Markdown')
    sql.execute(f"UPDATE viktorina SET score = score + 10 WHERE chatid = {message.chat.id}")
    db.commit()
    for value in sql.execute(f"SELECT score FROM viktorina WHERE chatid = {message.chat.id}"):
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ\n–Ø –≤—ã–¥–∞–ª –≤–∞–º 10 –æ—á–∫–æ–≤ –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ\n \n –í–∞—à –±–∞–ª–∞–Ω—Å: {value[0]}", parse_mode='html')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.from_user.id, '–°–ª–µ–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤–∞—Å –∂–¥—É—Ç', reply_markup=keyboards_create(MN.sledushiy1_keyboard))
@bot.message_handler(func = lambda m : m.text == '3-–ü–æ—Å–∞–¥–æ—á–Ω—ã–µ —Ç–∞–ª–æ–Ω—ã')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –Ω–æ –≤ –ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', reply_markup=keyboards_create(MN.sledushiy1_keyboard))
@bot.message_handler(func = lambda m : m.text == '2-–ë–∏–ª–µ—Ç—ã –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –Ω–æ –≤ –ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', reply_markup=keyboards_create(MN.sledushiy1_keyboard))
@bot.message_handler(func = lambda m : m.text == '1-–§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –Ω–æ –≤ –ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', reply_markup=keyboards_create(MN.sledushiy1_keyboard))


@bot.message_handler(func = lambda m : m.text == '–°–ª–µ–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å!')
def bes(message):
    bot.send_message(message.from_user.id, MN.message_vopros2, reply_markup=keyboards_create(MN.bezopas2_keyboard))
@bot.message_handler(func = lambda m : m.text == '2-–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æü•≥' , parse_mode='Markdown')
    sql.execute(f"UPDATE viktorina SET score = score + 10 WHERE chatid = {message.chat.id}")
    db.commit()
    for value in sql.execute(f"SELECT score FROM viktorina WHERE chatid = {message.chat.id}"):
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ\n–Ø –≤—ã–¥–∞–ª –≤–∞–º 10 –æ—á–∫–æ–≤ –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ\n \n –í–∞—à –±–∞–ª–∞–Ω—Å: {value[0]}", parse_mode='html')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.from_user.id, '–°–ª–µ–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤–∞—Å –∂–¥—É—Ç', reply_markup=keyboards_create(MN.sledushiy2_keyboard))
@bot.message_handler(func = lambda m : m.text == '1-–û–±—Ä–∞—â–∞–π—Å—è –≤ —Å–µ—Ç–∏ –∫ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º –ª—é–¥—è–º –Ω–∞ ¬´–≤—ã¬ª. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –æ–±—â–µ–Ω–∏—è.')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –Ω–æ –≤ –ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', reply_markup=keyboards_create(MN.sledushiy2_keyboard))
@bot.message_handler(func = lambda m : m.text == '3-–ù–µ –∑–∞–ø–∏—Å—ã–≤–∞–π –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –Ω–æ –≤ –ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', reply_markup=keyboards_create(MN.sledushiy2_keyboard))
@bot.message_handler(func = lambda m : m.text == '4-–°—Ç–∞—Ä–∞–π—Å—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –Ω–æ –≤ –ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', reply_markup=keyboards_create(MN.sledushiy2_keyboard))




@bot.message_handler(func = lambda m : m.text == '–°–ª–µ–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å!')
def bes(message):
    bot.send_message(message.from_user.id, MN.message_vopros3, reply_markup=keyboards_create(MN.bezopas3_keyboard))
@bot.message_handler(func = lambda m : m.text == '3-–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æü•≥' , parse_mode='Markdown')
    sql.execute(f"UPDATE viktorina SET score = score + 10 WHERE chatid = {message.chat.id}")
    db.commit()
    for value in sql.execute(f"SELECT score FROM viktorina WHERE chatid = {message.chat.id}"):
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ\n–Ø –≤—ã–¥–∞–ª –≤–∞–º 10 –æ—á–∫–æ–≤ –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ\n \n –í–∞—à –±–∞–ª–∞–Ω—Å: {value[0]}", parse_mode='html')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.from_user.id, '–°–ª–µ–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤–∞—Å –∂–¥—É—Ç', reply_markup=keyboards_create(MN.sledushiy3_keyboard))
@bot.message_handler(func = lambda m : m.text == '1-–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞ –º–µ–∂–¥—É –æ–Ω–ª–∞–π–Ω- –∏ –æ—Ñ–ª–∞–π–Ω-–º–∏—Ä–æ–º.')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –Ω–æ –≤ –ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', reply_markup=keyboards_create(MN.sledushiy3_keyboard))
@bot.message_handler(func = lambda m : m.text == '2-–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–ø—Ü–∏—è, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–Ω–ª–∞–π–Ω –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö, —Å–µ—Ç–∏.')
def bes(message):
    bot.send_message(message.from_user.id, '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –Ω–æ –≤ –ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤!', reply_markup=keyboards_create(MN.sledushiy3_keyboard))

bot.infinity_polling()